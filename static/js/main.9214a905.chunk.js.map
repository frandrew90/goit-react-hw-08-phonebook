{"version":3,"sources":["Components/contactList/ContactList.module.css","Components/filter/Filter.module.css","Components/App.module.css","Redux/phonebook/phonebook-actions.js","Redux/phonebook/phonebook-operations.js","Redux/phonebook/phonebook-selectors.js","Components/contactList/ContactList.js","Components/contatctForm/ContactForm.js","Components/filter/Filter.js","Components/App.js","Redux/phonebook/phonebook-reducers.js","Redux/store.js","index.js","Components/contatctForm/ContactForm.module.css"],"names":["module","exports","addContactReqest","createAction","addContactSuccess","addContactError","removeContactReqest","removeContactSuccess","removeContactError","getAllContactsReqest","getAllContactsSuccess","getAllContactsError","findContact","resetError","axios","defaults","baseURL","getAllContacts","dispatch","get","then","response","data","catch","error","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","contact","name","toLowerCase","includes","ContactList","useDispatch","useSelector","map","className","s","contactListItem","contactListName","contactListNumber","number","contactListItemBtn","type","id","onClick","delete","ContactForm","useState","setName","setNumber","contatcs","handleChange","e","target","value","isThereContact","some","contactForm","onSubmit","preventDefault","alert","uuidv4","post","addNewContact","contactFormName","contactFormNameInput","onChange","pattern","title","required","contactFormNumber","contactFormNumInput","contactFormBtn","Filter","filterInput","App","useEffect","createReducer","action","payload","_","combineReducers","middleware","getDefaultMiddleware","store","configureStore","reducer","phonebookReducer","devTools","process","ReactDOM","render","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,gBAAkB,qCAAqC,gBAAkB,qCAAqC,kBAAoB,uCAAuC,mBAAqB,0C,mBCAhND,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,8B,mBCAhED,EAAOC,QAAU,CAAC,MAAQ,qB,8HCCbC,EAAmBC,YAAa,+BAEhCC,EAAoBD,YAAa,+BAEjCE,EAAkBF,YAAa,6BAE/BG,EAAsBH,YACjC,iCAGWI,EAAuBJ,YAClC,kCAGWK,EAAqBL,YAAa,gCAElCM,EAAuBN,YAAa,+BAEpCO,EAAwBP,YACnC,gCAGWQ,EAAsBR,YAAa,8BAEnCS,EAAcT,YAAa,yBAE3BU,EAAaV,YAAa,wBCbvCW,IAAMC,SAASC,QAAU,wBAElB,I,IA0BMC,EAAiB,kBAAM,SAAAC,GAClCA,EAAST,KAETK,IACGK,IAAI,aACJC,MAAK,SAAAC,GAAQ,OAAIH,EAASR,EAAsBW,EAASC,UACzDC,OAAM,SAAAC,GACLN,EAASL,KACTK,EAASP,EAAoBa,S,QCjDtBC,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OACtCC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,QAEpCC,EAAqBC,YAChC,CAACP,EAAaI,IACd,SAACF,EAAUG,GACT,OAAOH,EAASG,QAAO,SAAAG,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASN,EAAOK,qB,wBC2BlCE,EA7BK,WAClB,IAAMnB,EAAWoB,cAEX1B,EAAc2B,YAAYR,GAEhC,OACE,6BACGnB,GACCA,EAAY4B,KAAI,SAAAP,GACd,OACE,qBAAIQ,UAAWC,IAAEC,gBAAjB,UACE,uBAAMF,UAAWC,IAAEE,gBAAnB,UAAqCX,EAAQC,KAA7C,OADF,OAGE,sBAAMO,UAAWC,IAAEG,kBAAnB,SAAuCZ,EAAQa,SAC/C,wBACEL,UAAWC,IAAEK,mBACbC,KAAK,SACLC,GAAIhB,EAAQgB,GACZC,QAAS,kBAAMhC,GFMF+B,EENyBhB,EAAQgB,GFM3B,SAAA/B,GACjCA,EAASZ,KAETQ,IACGqC,OADH,oBACuBF,IACpB7B,MAAK,kBAAMF,EAASX,EAAqB0C,OACzC1B,OAAM,SAAAC,GACLN,EAASL,KACTK,EAASV,EAAmBgB,UARL,IAAAyB,GEVf,sBAJqChB,EAAQgB,U,wBCuD5CG,EAjEK,WAClB,MAAwBC,mBAAS,IAAjC,mBAAOnB,EAAP,KAAaoB,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOP,EAAP,KAAeS,EAAf,KACMC,EAAWjB,YAAYd,GACvBP,EAAWoB,cAOXmB,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBzB,EAAR,EAAQA,KAAM0B,EAAd,EAAcA,MACL,SAAT1B,EAAkBoB,EAAQM,GAASL,EAAUK,IAYzCC,EAAiB,SAAA3B,GAAI,OACzBsB,EAASM,MAAK,SAAA7B,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBD,EAAKC,kBAE/D,OACE,uBAAMM,UAAWC,IAAEqB,YAAaC,SAbb,SAAAN,GAEnB,GADAA,EAAEO,iBACEJ,EAAe3B,GACjB,OAAOgC,MAAM,GAAD,OAAIhC,EAAJ,sCAEdhB,EHXyB,SAACgB,EAAMY,GAAP,OAAkB,SAAA5B,GAC7C,IAAMe,EAAU,CAAEC,OAAMY,SAAQG,GAAIkB,eAEpCjD,EAAShB,KAETY,IACGsD,KAAK,YAAanC,GAClBb,MAAK,SAAAC,GAAQ,OAAIH,EAASd,EAAkBiB,EAASC,UACrDC,OAAM,SAAAC,GACLN,EAASL,KACTK,EAASb,EAAgBmB,QGClB6C,CAAcnC,EAAMY,IAd7BQ,EAAQ,IACRC,EAAU,KAqBV,UACE,wBAAOd,UAAWC,IAAE4B,gBAApB,kBAEE,uBACE7B,UAAWC,IAAE6B,qBACbC,SAAUf,EACVT,KAAK,OACLd,KAAK,OACL0B,MAAO1B,EACPuC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAIZ,wBAAOlC,UAAWC,IAAEkC,kBAApB,oBAEE,uBACEnC,UAAWC,IAAEmC,oBACbL,SAAUf,EACVT,KAAK,MACLd,KAAK,SACL0B,MAAOd,EACP2B,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAIZ,wBAAQlC,UAAWC,IAAEoC,eAAgB9B,KAAK,SAA1C,6B,iBClCS+B,EAxBA,WACb,IAAMjD,EAASS,YAAYV,GACrBX,EAAWoB,cAQjB,OACE,wBAAOG,UAAWC,IAAEZ,OAApB,mCAEE,uBACEW,UAAWC,IAAEsC,YACb9C,KAAK,SACLc,KAAK,OACLY,MAAO9B,EACP0C,SAde,SAAAd,GACnB,IAAQE,EAAUF,EAAEC,OAAZC,MAER1C,EAASN,EAAYgD,W,iBCqBVqB,EAxBH,WACV,IAAM/D,EAAWoB,YAAYb,GAQ7B,OANAyD,qBAAU,WACRhE,EAASD,OAGR,CAACA,IAGF,qCACE,oBAAIwB,UAAWC,IAAEgC,MAAjB,uBAEA,cAAC,EAAD,IAEA,oBAAIjC,UAAWC,IAAEgC,MAAjB,sBAEA,cAAC,EAAD,IAEA,cAAC,EAAD,Q,sCCdA9C,EAAQuD,YAAc,IAAD,mBACxB/E,GAAoB,SAACsB,EAAO0D,GAAR,4BAAuB1D,GAAvB,CAA8B0D,EAAOC,aADjC,cAExB3E,GAAwB,SAAC4E,EAAGF,GAAJ,OAAeA,EAAOC,WAFtB,cAGxB9E,GAAuB,SAACmB,EAAO0D,GAAR,OACtB1D,EAAMI,QAAO,SAAAG,GAAO,OAAIA,EAAQgB,KAAOmC,EAAOC,cAJvB,IAOrBvD,EAASqD,YAAc,GAAD,eACzBvE,GAAc,SAAC0E,EAAGF,GAAJ,OAAeA,EAAOC,YAGjC7D,EAAQ2D,YAAc,IAAD,mBACxBtE,GAAa,iBAAM,MADK,cAExBR,GAAkB,SAACiF,EAAGF,GAAJ,OAAeA,EAAOC,WAFhB,cAGxB7E,GAAqB,SAAC8E,EAAGF,GAAJ,OAAeA,EAAOC,WAHnB,cAIxB1E,GAAsB,SAAC2E,EAAGF,GAAJ,OAAeA,EAAOC,WAJpB,IAOZE,cAAgB,CAC7B3D,QACAE,SACAN,UCjBIgE,EAAU,YAAOC,eAQRC,EANDC,YAAe,CAC3BC,QAAS,CAAEjE,SAAUkE,GACrBL,aACAM,UAAUC,IClBZC,IAASC,OACP,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFQ,SAASC,eAAe,U,kBCV1BnG,EAAOC,QAAU,CAAC,YAAc,iCAAiC,gBAAkB,qCAAqC,qBAAuB,0CAA0C,kBAAoB,uCAAuC,oBAAsB,yCAAyC,eAAiB,uC","file":"static/js/main.9214a905.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactListItem\":\"ContactList_contactListItem__25XIg\",\"contactListName\":\"ContactList_contactListName__2z-M4\",\"contactListNumber\":\"ContactList_contactListNumber__2mMNJ\",\"contactListItemBtn\":\"ContactList_contactListItemBtn__2Ti4M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__2wlLu\",\"filterInput\":\"Filter_filterInput__3fuNm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__zbFcq\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContactReqest = createAction('phonebook/addContactRequest');\r\n\r\nexport const addContactSuccess = createAction('phonebook/addContactSuccess');\r\n\r\nexport const addContactError = createAction('phonebook/addContactError');\r\n\r\nexport const removeContactReqest = createAction(\r\n  'phonebook/removeContactReqest',\r\n);\r\n\r\nexport const removeContactSuccess = createAction(\r\n  'phonebook/removeContactSuccess',\r\n);\r\n\r\nexport const removeContactError = createAction('phonebook/removeContactError');\r\n\r\nexport const getAllContactsReqest = createAction('phonebook/getContactsReqest');\r\n\r\nexport const getAllContactsSuccess = createAction(\r\n  'phonebook/getContactsSuccess',\r\n);\r\n\r\nexport const getAllContactsError = createAction('phonebook/getContactsError');\r\n\r\nexport const findContact = createAction('phonebook/findContact');\r\n\r\nexport const resetError = createAction('phonebook/resetError');\r\n","import axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n  addContactReqest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactReqest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  getAllContactsReqest,\r\n  getAllContactsSuccess,\r\n  getAllContactsError,\r\n  resetError,\r\n} from './phonebook-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nexport const addNewContact = (name, number) => dispatch => {\r\n  const contact = { name, number, id: uuidv4() };\r\n\r\n  dispatch(addContactReqest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(response => dispatch(addContactSuccess(response.data)))\r\n    .catch(error => {\r\n      dispatch(resetError());\r\n      dispatch(addContactError(error));\r\n    });\r\n};\r\n\r\nexport const removeContact = id => dispatch => {\r\n  dispatch(removeContactReqest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(removeContactSuccess(id)))\r\n    .catch(error => {\r\n      dispatch(resetError());\r\n      dispatch(removeContactError(error));\r\n    });\r\n};\r\n\r\nexport const getAllContacts = () => dispatch => {\r\n  dispatch(getAllContactsReqest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(response => dispatch(getAllContactsSuccess(response.data)))\r\n    .catch(error => {\r\n      dispatch(resetError());\r\n      dispatch(getAllContactsError(error));\r\n    });\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { removeContact } from '../../Redux/phonebook/phonebook-operations';\r\n// import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\nimport { getVisibleContacts } from '../../Redux/phonebook/phonebook-selectors';\r\n\r\nconst ContactList = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const findContact = useSelector(getVisibleContacts);\r\n\r\n  return (\r\n    <ul>\r\n      {findContact &&\r\n        findContact.map(contact => {\r\n          return (\r\n            <li className={s.contactListItem} key={contact.id}>\r\n              <span className={s.contactListName}>{contact.name}:</span>\r\n              &nbsp;\r\n              <span className={s.contactListNumber}>{contact.number}</span>\r\n              <button\r\n                className={s.contactListItemBtn}\r\n                type=\"button\"\r\n                id={contact.id}\r\n                onClick={() => dispatch(removeContact(contact.id))}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\n// ContactList.propTypes = {\r\n//   filtered: PropTypes.string.isRequired,\r\n//   removeContact: PropTypes.func.isRequired,\r\n//   contactsList: PropTypes.array.isRequired,\r\n// };\r\n","import React, { useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addNewContact } from '../../Redux/phonebook/phonebook-operations';\r\nimport { getContacts } from '../../Redux/phonebook/phonebook-selectors';\r\n\r\nconst ContactForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contatcs = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    name === 'name' ? setName(value) : setNumber(value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (isThereContact(name)) {\r\n      return alert(`${name} has been already in contact list`);\r\n    }\r\n    dispatch(addNewContact(name, number));\r\n    reset();\r\n  };\r\n\r\n  const isThereContact = name =>\r\n    contatcs.some(contact => contact.name.toLowerCase() === name.toLowerCase());\r\n\r\n  return (\r\n    <form className={s.contactForm} onSubmit={handleSubmit}>\r\n      <label className={s.contactFormName}>\r\n        Name:\r\n        <input\r\n          className={s.contactFormNameInput}\r\n          onChange={handleChange}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label className={s.contactFormNumber}>\r\n        Number:\r\n        <input\r\n          className={s.contactFormNumInput}\r\n          onChange={handleChange}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button className={s.contactFormBtn} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n// ContactForm.propTypes = {\r\n//   addNewContact: PropTypes.func.isRequired,\r\n//   contatcs: PropTypes.array.isRequired,\r\n// };\r\n","import React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { findContact } from '../../Redux/phonebook/phonebook-actions';\r\nimport { getFilter } from '../../Redux/phonebook/phonebook-selectors';\r\n\r\nconst Filter = () => {\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    const { value } = e.target;\r\n\r\n    dispatch(findContact(value));\r\n  };\r\n\r\n  return (\r\n    <label className={s.filter}>\r\n      Find contacts by name:\r\n      <input\r\n        className={s.filterInput}\r\n        name=\"filter\"\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={handleChange}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\n// Filter.propTypes = {\r\n//   findContact: PropTypes.func.isRequired,\r\n//   filter: PropTypes.string.isRequired,\r\n// };\r\n","import React, { useEffect } from 'react';\r\n// import PropTypes from 'prop-types';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { getAllContacts } from '../Redux/phonebook/phonebook-operations';\r\nimport { getContacts } from '../Redux/phonebook/phonebook-selectors';\r\nimport ContactList from './contactList/ContactList';\r\nimport ContactForm from './contatctForm/ContactForm';\r\nimport Filter from './filter/Filter';\r\nimport s from '../Components/App.module.css';\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch(getContacts);\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllContacts());\r\n\r\n    // eslint-disable-next-line\r\n  }, [getAllContacts]);\r\n\r\n  return (\r\n    <>\r\n      <h1 className={s.title}>Phonebook</h1>\r\n\r\n      <ContactForm />\r\n\r\n      <h2 className={s.title}>Contacts</h2>\r\n\r\n      <Filter />\r\n\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n// App.propTypes = {\r\n//   getAllContacts: PropTypes.func.isRequired,\r\n// };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactReqest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactReqest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  getAllContactsReqest,\r\n  getAllContactsSuccess,\r\n  getAllContactsError,\r\n  findContact,\r\n  resetError,\r\n} from './phonebook-actions';\r\n\r\nconst items = createReducer([], {\r\n  [addContactSuccess]: (state, action) => [...state, action.payload],\r\n  [getAllContactsSuccess]: (_, action) => action.payload,\r\n  [removeContactSuccess]: (state, action) =>\r\n    state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [findContact]: (_, action) => action.payload,\r\n});\r\n\r\nconst error = createReducer('', {\r\n  [resetError]: () => '',\r\n  [addContactError]: (_, action) => action.payload,\r\n  [removeContactError]: (_, action) => action.payload,\r\n  [getAllContactsError]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  error,\r\n});\r\n","// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import phonebookReducer from './phonebook/phonebook-reducers';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: phonebookReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n\r\n// ===================TOOLKIT==============================\r\n\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\n\r\nimport phonebookReducer from './phonebook/phonebook-reducers';\r\n\r\n// const middleware = [...getDefaultMiddleware(), logger];\r\nconst middleware = [...getDefaultMiddleware()];\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: phonebookReducer },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './Components/App';\nimport './index.css';\nimport store from './Redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__33CB-\",\"contactFormName\":\"ContactForm_contactFormName__2EcfD\",\"contactFormNameInput\":\"ContactForm_contactFormNameInput__3p58a\",\"contactFormNumber\":\"ContactForm_contactFormNumber__81RiX\",\"contactFormNumInput\":\"ContactForm_contactFormNumInput__1RxUG\",\"contactFormBtn\":\"ContactForm_contactFormBtn__3C13h\"};"],"sourceRoot":""}